[build-system]
requires = ["maturin>=1.0,<2.0"]
build-backend = "maturin"

[project]
name = "spatio"
description = "Blazingly fast spatial database library"
readme = { file = "README.md", content-type = "text/markdown" }
authors = [
  { name = "Petro Kvartsianyi", email = "pkvartsianyi@example.com" },
]
dynamic = ["version"]
license = { file = "LICENSE" }
requires-python = ">=3.8"

keywords = ["spatial", "database", "geospatial", "embedded", "temporal", "gis"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Rust",
  "Topic :: Database",
  "Topic :: Scientific/Engineering :: GIS",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]

[project.urls]
Homepage = "https://github.com/pkvartsianyi/spatio"
Documentation = "https://github.com/pkvartsianyi/spatio#readme"
Repository = "https://github.com/pkvartsianyi/spatio"
"PyPI" = "https://pypi.org/project/spatio"
"Crates.io" = "https://crates.io/crates/spatio"
Changelog = "https://github.com/pkvartsianyi/spatio/releases"
Issues = "https://github.com/pkvartsianyi/spatio/issues"

[project.optional-dependencies]
dev = [
  "pytest>=7.0.0",
  "pytest-benchmark>=4.0.0",
  "pytest-cov>=4.0.0",
  "pytest-xdist>=3.0.0",
]

[tool.maturin]
module-name = "spatio._spatio"
python-source = "src"
strip = true
manifest-path = "Cargo.toml"

[tool.ruff]
line-length = 88
fix = true
target-version = "py38"

[tool.ruff.lint]
select = [
  "E", "F", "W", "I", "UP", "B", "C4", "SIM", "TCH", "TID", "RUF"
]
ignore = [
  "E501",
  "B018",
  "TID252",
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["F401", "F811"]
"examples/**/*.py" = ["F401", "T201"]
"src/spatio/types.py" = ["TC004", "F821"]

[tool.ruff.lint.isort]
known-first-party = ["spatio"]
force-single-line = true

[tool.mypy]
files = ["src", "tests"]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

[[tool.mypy.overrides]]
module = ["spatio._spatio"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["spatio.*"]
warn_return_any = false

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = ["--strict-markers", "--strict-config", "--tb=short", "-v"]

markers = [
  "slow: Tests with longer runtime",
  "benchmark: Performance benchmark tests",
  "integration: Integration tests",
  "unit: Unit tests",
]
filterwarnings = [
  "error",
  "ignore::UserWarning",
  "ignore::DeprecationWarning",
  "ignore::pytest.PytestUnraisableExceptionWarning",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
show_missing = true
skip_covered = false
fail_under = 60
exclude_lines = [
  "pragma: no cover",
  "@overload",
  "if TYPE_CHECKING:",
  "raise NotImplementedError",
  "except ImportError:",
]

[tool.coverage.html]
directory = "htmlcov"
