# Default recipe - show available commands
default:
    @just --list

# Set up development environment
setup:
    uv venv --python 3.9
    uv pip install -r requirements-dev.txt

# Install requirements only
install-deps:
    uv pip install -r requirements-dev.txt

# Build the package in development mode
build:
    uv run maturin develop

# Build optimized release version
build-release:
    uv run maturin develop --release

# Build with debug symbols
build-debug:
    uv run maturin develop --profile dev

# CI-friendly build (works without pre-existing venv)
build-ci:
    uv pip install -e . --verbose

# Install package in development mode
install: build
    uv pip install -e .

# Run all tests
test: build
    uv run pytest -n auto --tb=short

# Run tests with verbose output
test-verbose: build
    uv run pytest -v

# Run only unit tests
test-unit: build
    uv run pytest -n auto --tb=short -m "unit"

# Run only integration tests
test-integration: build
    uv run pytest -n auto --tb=short -m "integration"

# Run performance benchmarks
bench: build-release
    uv run pytest --benchmark-only -v

# Run tests with coverage
coverage: build
    uv run pytest --cov=spatio --cov-report=html --cov-report=term-missing
    @echo "Coverage report generated in htmlcov/"

# Format Python code
fmt:
    uv run ruff check --fix src/ tests/ examples/
    uv run ruff format src/ tests/ examples/

# Run linting checks
lint:
    uv run ruff check src/ tests/ examples/
    uv run mypy src/

# Run type checking only
typecheck:
    uv run mypy src/

# Run security checks
security:
    uv run bandit -r src/

# Format Rust code
fmt-rust:
    cargo fmt --all

# Run clippy on Rust code
clippy:
    cargo clippy -- -D warnings -D clippy::dbg_macro

# Run all code quality checks
check: lint typecheck security

# Run pre-commit checks (format + check)
pre-commit: fmt clippy fmt-rust check

# Run all examples (performance demo runs locally but is skipped in CI)
examples: build
    @echo "Running basic usage example..."
    uv run python examples/basic_usage.py
    @echo "Running trajectory example..."
    uv run python examples/trajectory_tracking.py
    @echo "Running performance demo..."
    uv run python examples/performance_demo.py

# Run specific example
example name: build
    uv run python examples/{{name}}.py

# Build wheel for distribution
wheel:
    .venv/bin/maturin build --release
    @echo "Wheel built in target/wheels/"

# Build source distribution
sdist:
    .venv/bin/maturin sdist
    @echo "Source distribution built in target/wheels/"

# Publish to Test PyPI
publish-test: wheel
    @echo "Publishing to Test PyPI: https://test.pypi.org/project/spatio"
    .venv/bin/twine upload --repository testpypi target/wheels/*

# Publish to PyPI
publish: wheel
    @echo "Publishing to PyPI: https://pypi.org/project/spatio"
    .venv/bin/twine upload target/wheels/*

# Clean up build artifacts and caches
clean:
    rm -rf .pytest_cache/
    rm -rf .mypy_cache/
    rm -rf .ruff_cache/
    rm -rf htmlcov/
    rm -rf dist/
    rm -rf *.egg-info/
    rm -f .coverage
    rm -f coverage.xml
    rm -f profile.svg
    find . -type f -name '*.py[co]' -delete
    find . -type d -name __pycache__ -exec rm -r {} +
    find . -name "*.so" -delete
    find . -name "*.pyd" -delete
    cargo clean

# Clean everything including virtual environment
clean-all: clean
    rm -rf .venv

# Show current version
version: build
    .venv/bin/python -c "import spatio; print(f'spatio {spatio.__version__}')"

# Show development environment info
info:
    @echo "Python: $(python3 --version)"
    @echo "Rust: $(rustc --version)"
    @echo "Cargo: $(cargo --version)"
    @echo "Virtual env: .venv"
    @if [ -f ".venv/bin/python" ]; then echo "Virtual env Python: $(.venv/bin/python --version)"; fi

# Run full CI pipeline locally
ci: check test coverage
    @echo "All CI checks passed!"

# Complete development setup from scratch
dev-setup: setup build
    @echo "Development environment ready!"
    @echo "Activate with: source .venv/bin/activate"

# Watch and rebuild on file changes (requires cargo-watch)
watch:
    cargo watch -x "build" -s "just build"

# Profile performance (requires py-spy)
profile script="examples/performance_demo.py": build-release
    .venv/bin/py-spy record -o profile.svg -- .venv/bin/python {{script}}
    @echo "Profile saved to profile.svg"

# Generate flame graph (requires py-spy)
flamegraph script="examples/performance_demo.py": build-release
    .venv/bin/py-spy record --format flamegraph -o flamegraph.svg -- .venv/bin/python {{script}}
    @echo "Flame graph saved to flamegraph.svg"

# Run comprehensive benchmark suite
benchmark-suite: build-release
    .venv/bin/python examples/benchmark_suite.py

# Serve documentation locally (if using mkdocs)
docs-serve:
    .venv/bin/mkdocs serve

# Build documentation
docs-build:
    .venv/bin/mkdocs build

# Run a Python REPL with the package loaded
repl: build
    .venv/bin/python -c "import spatio; print('Spatio loaded. Try: db = spatio.Spatio.memory()')" -i

# Run Jupyter notebook (if jupyter is installed)
notebook: build
    .venv/bin/jupyter notebook

# Quick test - just basic functionality
quick-test: build
    .venv/bin/python -c "import spatio; db = spatio.Spatio.memory(); db.insert(b'test', b'value'); assert db.get(b'test') == b'value'; print('Basic functionality works')"
