name: Release Rust Crate

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v0.1.0)"
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: read

jobs:
  check:
    name: Pre-release checks (Rust)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: release-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets -- -D warnings

      - name: Run tests
        run: cargo test --verbose

      - name: Run doc tests
        run: cargo test --doc

      - name: Check documentation
        run: cargo doc --no-deps

      - name: Verify package can be built
        run: cargo package --allow-dirty

      - name: Verify version matches tag
        run: |
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG_VERSION="${{ github.event.inputs.version }}"
          else
            TAG_VERSION=${GITHUB_REF#refs/tags/}
          fi
          TAG_VERSION=${TAG_VERSION#v}  # Remove 'v' prefix if present

          echo "Cargo.toml version: $CARGO_VERSION"
          echo "Tag version: $TAG_VERSION"

          if [[ "$CARGO_VERSION" != "$TAG_VERSION" ]]; then
            echo "Version mismatch! Cargo.toml has $CARGO_VERSION but tag is $TAG_VERSION"
            echo "Please update Cargo.toml version to match the tag"
            exit 1
          fi
          echo "Version verification passed"

      - name: Verify Python version matches tag
        working-directory: py-spatio
        run: |
          # Extract version from py-spatio Cargo.toml (maturin uses this for Python package version)
          PYTHON_CARGO_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG_VERSION="${{ github.event.inputs.version }}"
          else
            TAG_VERSION=${GITHUB_REF#refs/tags/}
          fi
          TAG_VERSION=${TAG_VERSION#v}  # Remove 'v' prefix if present

          echo "Python Cargo.toml version: $PYTHON_CARGO_VERSION"
          echo "Tag version: $TAG_VERSION"

          if [[ "$PYTHON_CARGO_VERSION" != "$TAG_VERSION" ]]; then
            echo "Python version mismatch! py-spatio/Cargo.toml has $PYTHON_CARGO_VERSION but tag is $TAG_VERSION"
            echo "Please update py-spatio/Cargo.toml version to match the tag"
            exit 1
          fi
          echo "Python version verification passed"

  create-release:
    name: Create GitHub Release (Rust)
    needs: check
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f "CHANGELOG.md" ]; then
            # Extract changelog for this version
            awk '/^## \[${{ steps.get_version.outputs.version }}\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > release_notes.md
            if [ ! -s release_notes.md ]; then
              echo "## Changes" > release_notes.md
              echo "See [CHANGELOG.md](CHANGELOG.md) for details." >> release_notes.md
            fi
          else
            echo "## Changes" > release_notes.md
            echo "- Bug fixes and improvements" >> release_notes.md
            echo "- See commit history for details" >> release_notes.md
          fi

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, 'alpha') || contains(steps.get_version.outputs.version, 'beta') || contains(steps.get_version.outputs.version, 'rc') }}
          token: ${{ github.token }}

  publish-crates:
    name: Publish Rust crate to crates.io
    needs: check
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: publish-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Publish to crates.io (dry run)
        run: cargo publish --dry-run
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

      - name: Publish to crates.io
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

  publish-python:
    name: Publish Python package to PyPI
    needs: create-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            py-spatio/target
          key: python-publish-${{ hashFiles('**/Cargo.lock', 'py-spatio/pyproject.toml') }}

      - name: Install Python build tools
        working-directory: py-spatio
        run: |
          python -m pip install --upgrade pip
          pip install maturin twine

      - name: Debug maturin environment
        working-directory: py-spatio
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in py-spatio:"
          ls -la
          echo "LICENSE files found:"
          find . -name "LICENSE" -type f
          find .. -name "LICENSE" -type f
          echo "README files found:"
          find . -name "README.md" -type f
          find .. -name "README.md" -type f

      - name: Build Python wheels
        working-directory: py-spatio
        run: maturin build --release --out dist

      - name: Build source distribution
        working-directory: py-spatio
        run: |
          echo "Attempting to build source distribution..."
          maturin sdist --out dist --verbose

      - name: Verify package metadata
        working-directory: py-spatio
        run: |
          twine check dist/*
          echo "Package verification completed successfully"

      - name: Publish to PyPI
        working-directory: py-spatio
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
