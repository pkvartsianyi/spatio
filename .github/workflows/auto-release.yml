name: Auto Release on Version Change

on:
  push:
    branches: [main]
    paths:
      - "Cargo.toml"
      - "py-spatio/Cargo.toml"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: read

jobs:
  # ---------------- STAGE 1: DETECT ----------------
  detect-changes:
    name: Detect Version Changes
    runs-on: ubuntu-latest
    outputs:
      rust-changed: ${{ steps.check-rust.outputs.changed }}
      python-changed: ${{ steps.check-python.outputs.changed }}
      rust-version: ${{ steps.check-rust.outputs.version }}
      python-version: ${{ steps.check-python.outputs.version }}
      rust-previous: ${{ steps.check-rust.outputs.previous }}
      python-previous: ${{ steps.check-python.outputs.previous }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check Rust version changes
        id: check-rust
        run: |
          CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          TAG_NAME="rust-v$CURRENT_VERSION"
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME$"; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
          PREVIOUS_COMMIT=$(git log --format=format:%H --follow -2 Cargo.toml | tail -1)
          PREVIOUS_VERSION=$(git show $PREVIOUS_COMMIT:Cargo.toml | grep '^version = ' | head -1 | sed 's/version = "\(.*\)"/\1/' || echo "")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "previous=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT

      - name: Check Python version changes
        id: check-python
        run: |
          CURRENT_VERSION=$(grep '^version = ' py-spatio/Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          TAG_NAME="python-v$CURRENT_VERSION"
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME$"; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
          PREVIOUS_COMMIT=$(git log --format=format:%H --follow -2 py-spatio/Cargo.toml | tail -1)
          PREVIOUS_VERSION=$(git show $PREVIOUS_COMMIT:py-spatio/Cargo.toml | grep '^version = ' | head -1 | sed 's/version = "\(.*\)"/\1/' || echo "")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "previous=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT

      - name: Summary
        run: |
          echo "Rust: ${{ steps.check-rust.outputs.previous }} -> ${{ steps.check-rust.outputs.version }} (Changed: ${{ steps.check-rust.outputs.changed }})"
          echo "Python: ${{ steps.check-python.outputs.previous }} -> ${{ steps.check-python.outputs.version }} (Changed: ${{ steps.check-python.outputs.changed }})"

  # ---------------- STAGE 2: TEST ----------------
  test-rust:
    name: Test Rust (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: detect-changes
    if: needs.detect-changes.outputs.rust-changed == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - run: cargo fmt --all -- --check
        if: matrix.os == 'ubuntu-latest'
      - run: cargo clippy --all-targets -- -D warnings
        if: matrix.os == 'ubuntu-latest'
      - run: cargo build --verbose
      - run: cargo test --verbose
      - run: cargo test --doc
      - run: cargo package --allow-dirty
        if: matrix.os == 'ubuntu-latest'

  test-python:
    name: Test Python (${{ matrix.os }}, py${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: detect-changes
    if: needs.detect-changes.outputs.python-changed == 'true'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        exclude:
          - os: windows-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.10"
          - os: macos-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.10"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: dtolnay/rust-toolchain@stable
      - working-directory: py-spatio
        run: |
          python -m pip install --upgrade pip
          pip install maturin pytest -r requirements-dev.txt
          maturin build --out dist --interpreter python --verbose
          pip install dist/*.whl --force-reinstall --no-deps
          pytest -v --tb=short -x --maxfail=5

  run-tests:
    name: Run Tests Stage
    runs-on: ubuntu-latest
    needs: [test-rust, test-python]
    if: always()
    steps:
      - run: echo "All tests finished successfully."

  # ---------------- STAGE 3: RELEASE ----------------
  release-rust:
    name: Release Rust Crate
    runs-on: ubuntu-latest
    needs: [run-tests, detect-changes]
    if: needs.detect-changes.outputs.rust-changed == 'true'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Tag and release Rust
        run: |
          VERSION="${{ needs.detect-changes.outputs.rust-version }}"
          TAG="rust-v$VERSION"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag "$TAG" -m "Release Rust crate $VERSION"
          git push origin "$TAG"

  build-python-wheels:
    name: Build Python Wheels (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [run-tests, detect-changes]
    if: needs.detect-changes.outputs.python-changed == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - uses: dtolnay/rust-toolchain@stable
      - uses: docker/setup-qemu-action@v3
        if: runner.os == 'Linux'
        with:
          platforms: arm64
      - uses: pypa/cibuildwheel@v2.16
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-* cp313-*"
          CIBW_ARCHS_LINUX: "x86_64 aarch64"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_ARCHS_WINDOWS: "AMD64"
          CIBW_SKIP: "pp* *-musllinux*"
          CIBW_TEST_REQUIRES: "pytest"
          CIBW_TEST_COMMAND: "pytest {project}/py-spatio/tests -v"
          CIBW_TEST_SKIP: "*-*linux_aarch64 *-macosx_arm64"
          CIBW_BUILD_VERBOSITY: 1
        with:
          package-dir: ./py-spatio
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  build-python-sdist:
    name: Build Python Source Dist
    runs-on: ubuntu-latest
    needs: [run-tests, detect-changes]
    if: needs.detect-changes.outputs.python-changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: |
          pip install maturin
          cd py-spatio
          maturin sdist --out dist
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: py-spatio/dist/*.tar.gz

  release-python:
    name: Release Python Package
    runs-on: ubuntu-latest
    needs: [build-python-wheels, build-python-sdist, detect-changes]
    if: needs.detect-changes.outputs.python-changed == 'true'
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: |
          VERSION="${{ needs.detect-changes.outputs.python-version }}"
          TAG="python-v$VERSION"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag "$TAG" -m "Release Python package $VERSION"
          git push origin "$TAG"
      - uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true
      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist
      - run: |
          pip install twine
          twine check dist/*
          if [ -n "${{ secrets.PYPI_API_TOKEN }}" ]; then
            twine upload dist/*
          else
            echo "Skipping PyPI publish (missing token)"
          fi

  run-release:
    name: Release Stage
    runs-on: ubuntu-latest
    needs: [release-rust, release-python]
    if: always()
    steps:
      - run: echo "All release jobs finished."

  # ---------------- STAGE 4: DOCS + SUMMARY ----------------
  docs:
    name: Build and Deploy Documentation
    runs-on: ubuntu-latest
    needs: [run-release]
    if: always()
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - run: |
          cargo doc --no-deps --all-features
          echo '<meta http-equiv="refresh" content="0; url=spatio">' > target/doc/index.html
      - uses: actions/configure-pages@v4
      - uses: actions/upload-pages-artifact@v3
        with:
          path: target/doc
      - uses: actions/deploy-pages@v4

  summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [run-release]
    if: always()
    steps:
      - run: |
          echo "Release Summary"
          echo "================"
          echo "Rust changed: ${{ needs.detect-changes.outputs.rust-changed }}"
          echo "Python changed: ${{ needs.detect-changes.outputs.python-changed }}"
          echo "Rust version: ${{ needs.detect-changes.outputs.rust-version }}"
          echo "Python version: ${{ needs.detect-changes.outputs.python-version }}"
